// This pipeline revolves around building a Docker image:
// - Lint: Lints a Dockerfile using hadolint
// - detect new secrets: Detect new secrets
// - sonar scanner: Scan source code for vulnerabilities

pipeline {
    environment { // Environment variables defined for all steps
        TOOLS_IMAGE = "127.0.0.1:5000/tools-image"
	SONAR_KEY = "juice-shop"
    }

    agent any

    stages {
        stage("lint") {
            agent {
                docker {
                    image "docker.io/hadolint/hadolint:v1.18.0"
                    reuseNode true
                }
            }
            steps {
                sh label: "Lint Dockerfile", script: "hadolint Dockerfile > hadolint-results.txt"
            }
        }

        stage("detect new secrets") {
            agent {
                docker {
                    image "${TOOLS_IMAGE}"
                    args "--volume /etc/passwd:/etc/passwd:ro"
                    reuseNode true
                }
            }
            steps {
                script {
                    def result = sh label: "detect-secrets",
                        script: """\
                            detect-secrets-hook --no-verify \
                                                -v \
                                                --baseline .secrets.baseline.json \
                            \$(git diff-tree --no-commit-id --name-only -r ${GIT_COMMIT} | xargs -n1)
                        """,
                        returnStatus: true
                        
                        if (result == 1) {
                            error("unaudited secrets have been found")
                        }
                }
            }
        }

       stage("sonnarscanner") {
           agent {
               docker {
                   image "${TOOLS_IMAGE}"
                   // Make sure that username can be mapped correctly
                   args "--volume /etc/passwd:/etc/passwd:ro --network lab"
                   reuseNode true
               }
           }
           steps {
               withSonarQubeEnv("sonarqube.demo.local") {
                 withEnv(['npm_config_cache=npm-cache', 'HOME=.']){
                   sh label: "clear npm cache",
                      script: "npm  cache clear --force"
                   sh label: "install prerequisites",
                      script: "npm install -D typescript"
                   sh label: "sonar-scanner",
                      script: """\
                          sonar-scanner \
                          '-Dsonar.buildString=${BRANCH_NAME}-${BUILD_ID}' \
                          '-Dsonar.projectKey=${SONAR_KEY}' \
                          '-Dsonar.projectVersion=${BUILD_ID}' \
                          '-Dsonar.sources=${WORKSPACE}'
                      """
                 }
               }
           }
       }
       
     stage("quality gate"){
       steps {
         timeout(time: 1, unit: 'HOURS') {
           waitForQualityGate abortPipeline: true
         }
       }
     }

   }
   post {
        always {
             archiveArtifacts artifacts: "*-results.txt"
        }
   }
}
